{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Nick's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust:","text":"<p>Welcome to this step-by-step guide for setting up a Rust project in a Dev Container! Hopefully by the end of this tutorial you'll have a fully functional Rust development environment and a simple Rust program!</p> <ul> <li>Primary author: Nicholas Nguyen</li> <li>Reviewer: Logan Gatza</li> </ul>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Required tools</p> <p>Before we begin, make sure you have the following:</p> <ol> <li>Git installed: Install git if you don't already have it.</li> <li>Visual Studio Code(VS Code): Download and install it from here.</li> <li>Docker installed: Required to run the dev container. Get Docker here. </li> <li>Command-line basics: Basic knowledge of terminal commands and Git.</li> </ol>"},{"location":"tutorials/rust-setup/#set-up-guide","title":"Set-Up Guide","text":""},{"location":"tutorials/rust-setup/#step-1-create-a-local-directory-and-initialize-git","title":"STEP 1. Create a Local Directory and Initialize Git","text":"<p>(A) Open your terminal or command prompt.</p> <p>(B) Create a new directory for your project. (Note: Of course, if you'd like to organize this tutorial somewhere else on your machine, go ahead and change into that parent directory first. By default this will be in your user's home directory.):</p> <p><pre><code>mkdir rust-hello\ncd rust-hello\n</code></pre> (C) Initialize a new Git repository: <pre><code>git init\n</code></pre></p>"},{"location":"tutorials/rust-setup/#step-2-setting-up-the-development-environment","title":"STEP 2. Setting Up the Development Environment","text":"<p>(A) In VS Code, open the <code>rust-hello</code> directory. You can do this via: File &gt; Open Folder.</p> <p>(B) Install the Dev Containers extension for VS Code.</p> <p>(C) Create a <code>.devcontainer</code> directory in the root of your project with the following file inside of this \"hidden\" configuration directory: <code>devcontainer/devcontainer.json</code></p> <p>The <code>devcontainer.json</code> file defines the configuration for your development environment. Here, we're specifying the following:</p> <ul> <li> <p><code>name</code>: A descriptive name for your dev container.</p> </li> <li> <p><code>image</code>: The Docker image to use. For this tutorial, we'll be using a base image of Rust from Microsoft.</p> </li> <li> <p><code>customizations.vscode.extensions</code>:  list of Visual Studio Code extensions to be installed in the development container. Extensions enhance your productivity by adding features specific to your development language or tools. For Rust, the <code>rust-analyzer</code> extension is essential, providing capabilities such as code completion, inline documentation, and real-time diagnostics.</p> </li> <li> <p><code>customizations.vscode.settings</code>:  Visual Studio Code-specific settings for customizing your workspace environment inside the container. In this example, the <code>rust-analyzer.cargo.autoReload</code> setting is enabled to ensure that the Rust Analyzer automatically reloads the Cargo workspace when files are added, removed, or updated. <pre><code>{\n  \"name\": \"Rust Dev Container\",\n  \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\n        \"rust-lang.rust-analyzer\"\n      ],\n      \"settings\": {\n        \"rust-analyzer.cargo.autoReload\": true\n      }\n    }\n  }\n}\n</code></pre></p> </li> </ul> <p>Why a Dev Container?</p> <p>Dev Containers provide a consistent, reproducible development environment, reducing setup time and dependency issues.</p>"},{"location":"tutorials/rust-setup/#step-3-build-and-open-the-dev-container","title":"STEP 3. Build and Open the Dev Container","text":"<p>(A) Open the project in VS Code.</p> <p>(B) Open the Command Palette (<code>Ctrl+Shift+P</code> or <code>Cmd+Shift+P</code>) and select <code>Dev Containers: Reopen in Container</code>.</p> <p>(C) You can verify Rust is installed by running: <pre><code>rustc --version\n</code></pre></p> <p>Expected Output</p> <p><code>plaintext rustc 1.x.x (or newer)</code></p>"},{"location":"tutorials/rust-setup/#hello-comp423-project","title":"Hello COMP423 Project","text":""},{"location":"tutorials/rust-setup/#step-4-initialize-a-rust-project","title":"STEP 4. Initialize a Rust Project","text":"<p>Use <code>cargo</code> to create a new binary project.</p> <pre><code>cargo new hello-comp423 --vcs none\ncd hello-comp423\n</code></pre> <p>Avoid Git Reinitialization</p> <p>The <code>--vcs none</code> flag prevents <code>cargo</code> from creating a new Git repository since you already initialized one earlier.\"</p>"},{"location":"tutorials/rust-setup/#step-5-writing-the-program","title":"STEP 5. Writing the Program","text":"<p>Edit the <code>src/main.rs</code> file to print \"Hello COMP423\" to the terminal: <pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre></p>"},{"location":"tutorials/rust-setup/#step-6-build-and-run-the-program","title":"STEP 6. Build and Run the Program","text":"<p>(A) Run the following command to compile the Rust program: <pre><code>cargo build\n</code></pre></p> <p>Where's the binary?</p> <p>The compiled binary is located in the <code>target/debug</code> directory. To run it manually, execute: <code>./target/debug/hello-comp423</code></p> <p>(B) Instead of building and running separately, we can use the <code>cargo run</code> command to run the program directly.</p> <pre><code>cargo run\n</code></pre> <p>What's the difference between build and run?</p> <ul> <li>cargo build: Compiles the project without running it.</li> <li>cargo run: Builds the project (if necessary) and immediately runs the resulting binary.</li> </ul>"},{"location":"tutorials/rust-setup/#final-words","title":"Final Words","text":"<p>Congratulations! \ud83c\udf89 You've successfully set up a Rust development environment in a Dev Container and created a program that prints \"Hello COMP423.\" You now have the foundation to build and explore more Rust projects.</p> <p>Next Steps</p> <ul> <li>Experiment with Rust features like modules, traits, and ownership. - Try using cargo test to write and run unit tests.</li> </ul>"},{"location":"tutorials/rust-setup/#sources","title":"Sources","text":"<ul> <li>423 MkDocs Tutorial</li> <li>Rust Documentation</li> </ul>"}]}